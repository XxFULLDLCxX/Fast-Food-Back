generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Additional {
  id               Int               @id @default(autoincrement())
  name             String            
  image            String
  price            Int
  info             String
  productId        Int
  createdAt        DateTime          @default(now()) @db.Timestamp(6)
  updatedAt        DateTime          @updatedAt @db.Timestamp(6)
  products         Product           @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orderAdditionals OrderAdditional[]

  @@map("additionals")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  image     String
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt @db.Timestamp(6)
  products  Product[]

  @@map("categories")
}

model Order {
  id        Int      @id @default(autoincrement())
  note      Int
  code      Int      @default(autoincrement())
  quantity  Int
  
  productId Int
  paymentId Int
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)

  payments         Payment           @relation(fields: [paymentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  products         Product           @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orderAdditionals OrderAdditional[]

  @@map("orders")
}

model OrderAdditional {
  id           Int        @id @default(autoincrement())
  orderId      Int
  additionalId Int
  createdAt    DateTime   @default(now()) @db.Timestamp(6)
  updatedAt    DateTime   @updatedAt @db.Timestamp(6)
  order        Order      @relation(fields: [orderId], references: [id])
  additional   Additional @relation(fields: [additionalId], references: [id])

  @@map("orderAdditionals")
}

model Payment {
  id        Int      @id @default(autoincrement())
  code      Int      @unique @default(autoincrement())
  total     Int?
  status    String?  @default("PENDING")
  change    Int?
  userId    Int?
  users     User?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)
  orders    Order[]

  @@map("payments")
}

model Product {
  id          Int          @id @default(autoincrement())
  name        String
  image       String
  banner      String?
  price       Int
  teaser      String
  details     String
  categoryId  Int
  createdAt   DateTime     @default(now()) @db.Timestamp(6)
  updatedAt   DateTime     @updatedAt @db.Timestamp(6)
  additionals Additional[]
  orders      Order[]
  categories  Category     @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("products")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt @db.Timestamp(6)
  payments  Payment[]

  @@map("users")
}